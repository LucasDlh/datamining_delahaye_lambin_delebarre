}
fp=fp/sqrt(sum(fp^2))
cp=apply(X, 1,function(x){return(sum(x*fp, na.rm=TRUE))})
}
return (list(cp=cp, fp=fp))
}
nipals=function(X,h=2,iter=100){
n = nrow(X)
p = ncol(X)
m = apply(X,2,function(x){return(mean(x, na.rm=TRUE))})
s = apply(X,2,function(x){return(sd(x, na.rm=TRUE))})*sqrt((n-1)/n)
Xr = (X-rep(1,n)%*%t(m))/(rep(1,n)%*%t(s))
CP=matrix(0,nrow=n,ncol=h)
FP=matrix(0,ncol=h, nrow=p)
Xrec=matrix(0,nrow=n,ncol=p)
for (i in 1:h) {
r=cp_fm(Xr,iter)
CP[,i]=r$cp
FP[,i]=r$fp
Xr=Xr-(r$cp)%*%t(r$fp)
}
Xrec = CP%*%t(FP)
Xrec = Xrec*(rep(1,n)%*%t(s)) + rep(1,n)%*%t(m)
return (list(CP=CP, FP=FP, rec=Xrec))
}
n_resultats = nipals(airquality,h=ncol(airquality))
pca_resultats = PCA(airquality[, c("Ozone", "Solar.R", "Wind", "Temp")], scale.unit=TRUE, ncp=2, graph = FALSE)
print(pca_resultats$FP)
cp_fm=function(X,iter)
{
cp=X[,1]
fp=rep(0,ncol(X))
for(i in 1:iter)
{
for(j in 1:ncol(X)) {fp[j] = sum(X[,j]*cp, na.rm=TRUE)}
fp=fp/sqrt(sum(fp^2))
cp=apply(X, 1,function(x){return(sum(x*fp, na.rm=TRUE))})
}
return (list(cp=cp, fp=fp))
}
nipals=function(X,h=2,iter=100)
{
n = nrow(X)
p=ncol(X)
m = apply(X,2,function(x){return(mean(x, na.rm=TRUE))})
s = apply(X,2,function(x){return(sd(x, na.rm=TRUE))})*sqrt((n-1)/n)
Xr = (X-rep(1,n)%*%t(m))/(rep(1,n)%*%t(s))
CP=matrix(0,nrow=n,ncol=h)
FP=matrix(0,ncol=h, nrow=p)
Xrec=matrix(0,nrow=n,ncol=p)
for (i in 1:h)
{
r=calcul_cp_fp_dm(Xr,iter)
CP[,i]=r$cp
FP[,i]=r$fp
Xr=Xr-(r$cp)%*%t(r$fp)
}
Xrec = CP%*%t(FP)
Xrec = Xrec*(rep(1,n)%*%t(s)) + rep(1,n)%*%t(m)
return (list(CP=CP, FP=FP, rec=Xrec))
}
n_resultats = nipals(airquality,h=ncol(airquality))
pca_resultats = PCA(airquality[, c("Ozone", "Solar.R", "Wind", "Temp")], scale.unit=TRUE, ncp=2, graph = FALSE)
print(n_resultats$FP)
print(head(res_dm$CP))
print(head(acp$ind$coord))
print(head(res_dm$rec))
n_resultats = nipals(airquality,h=ncol(airquality))
pca_resultats=PCA(airquality, scale.unit=TRUE, graph=FALSE)
n_resultats$FP
n_resultats$FP
head(n_resultats$CP)
n_resultats$FP
head(n_resultats$CP)
head(pca_resultats$ind$coord)
head(n_resultats$CP)
head(pca_resultats$ind$coord)
head(n_resultats$FP)
head(n_resultats$CP)
head(pca_resultats$ind$coord)
head(n_resultats$FP)
head(pca_resultats$svd$V)
#indices des valeurs manquantes
im = which(is.na(as.matrix(airquality)))
summary(as.matrix(airquality))
#indices des valeurs manquantes
im = which(is.na(as.matrix(airquality)))
summary(as.matrix(airquality))
print(n_resultats$rec[im])
summary(airquality)
summary(n_resultats$rec)
summary(airquality-n_resultats$rec)
airquality2=as.matrix(airquality)
airquality2[im]=n_resultats$rec[im]
summary(airquality2)
airquality2=as.matrix(airquality)
airquality2[im]=n_resultats$rec[im]
#summary(airquality2)
n_resultats2 = nipals(airquality2,h=ncol(airquality2))
head(n_resultats2$CP)
head(pca_resultats$ind$coord)
head(n_resultats2$FP)
head(pca_resultats$svd$V)
n_resultats2 = nipals(airquality2,h=ncol(airquality2))
head(n_resultats2$CP)
head(pca_resultats$ind$coord)
head(n_resultats2$FP)
head(pca_resultats$svd$V)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(readr)
customers <- read_csv("Données/olist_customers_dataset.csv")
geolocation <- read_csv("Données/olist_geolocation_dataset.csv")
sellers <- read_csv("Données/olist_sellers_dataset.csv")
order_items <- read_csv("Données/olist_order_items_dataset.csv")
products <- read_csv("Données/olist_products_dataset.csv")
orders <- read_csv("Données/olist_orders_dataset.csv")
order_payments <- read_csv("Données/olist_order_payments_dataset.csv")
order_reviews <- read_csv("Données/olist_order_reviews_dataset.csv")
translation_product_category <- read_csv("Données/product_category_name_translation.csv")
library(dplyr)
geolocationbis <- geolocation %>%
arrange(geolocation_zip_code_prefix) %>%
group_by(geolocation_zip_code_prefix) %>%
summarise_all(last)
library("data.table")
merge1 <- merge(customers,geolocationbis,by.x="customer_zip_code_prefix",by.y="geolocation_zip_code_prefix",all.x=TRUE)
merge2 <- merge(merge1,orders,by="customer_id",all.x=TRUE)
merge3 <- merge(merge2,order_items,by="order_id",all.x=TRUE)
merge4 <- merge(merge3,products,by="product_id",all.x=TRUE)
merge5 <- merge(merge4,sellers,by="seller_id",all.x=TRUE)
data <- merge(merge5,translation_product_category,by="product_category_name",all.x=TRUE)
library(tidyr)
data <- data %>% drop_na(product_category_name_english)
head(data)
summary(data)
data_prix <- data %>%
arrange(product_category_name_english,product_id) %>%
group_by(product_category_name_english,product_id) %>%
summarise(nb_ventes=n())
data_prixmoyen <- data %>%
group_by(product_category_name_english,product_id) %>%
summarise(prix_moyen=mean(price))
data_prix <- merge(data_prix,data_prixmoyen[,c("product_id","prix_moyen")],by="product_id",all.x=TRUE)
for(categorie in unique(data_prix["product_category_name_english"])){
categ <- data_prix[data_prix$product_category_name_english==categorie,]
data_prix["categorie_prix"] <- ntile(data_prix$prix_moyen,n=5)
}
data_nb_vente_categ <- data %>%
arrange(product_category_name_english) %>%
group_by(product_category_name_english) %>%
summarise(nb_vente_categ=n())
categ_a_garder <- data_nb_vente_categ %>% filter(nb_vente_categ>nrow(data)*0.01)
data_prix <- merge(data_prix,categ_a_garder,by="product_category_name_english")
data_nb_vente_categ_prix <- data_prix %>%
arrange(product_category_name_english,categorie_prix) %>%
group_by(product_category_name_english,categorie_prix) %>%
summarise(nb_vente_categ_prix=n())
data_nb_vente_produit <- data_prix %>%
arrange(product_category_name_english,categorie_prix,product_id) %>%
group_by(product_category_name_english,categorie_prix,product_id) %>%
summarise(nb_vente_produit=n())
data_proportion_vente <- merge(data_nb_vente_produit,data_nb_vente_categ_prix,by=c("product_category_name_english","categorie_prix"),all.x=TRUE)
data_proportion_vente["proportion_vente"] = data_proportion_vente$nb_vente_produit/data_proportion_vente$nb_vente_categ_prix
for(categorie_produit in unique(data_proportion_vente["product_category_name_english"])){
for(categ_prix in unique(data_proportion_vente["categorie_prix"])){
categ <- data_proportion_vente %>% filter(product_category_name_english==categorie_produit & categorie_prix==categ_prix)
data_prix["categorie_vente"] <- ntile(data_proportion_vente$proportion_vente,n=3)
}
}
data["delai_de_livraison"] <- as.numeric(difftime(data$order_estimated_delivery_date,data$order_purchase_timestamp),units="days")
data_delaimoyen <- data %>%
group_by(product_category_name_english,product_id) %>%
summarise(delai_moyen_livraison=mean(delai_de_livraison))
data_prix <- merge(data_prix,data_delaimoyen[,c("product_id","delai_moyen_livraison")],by="product_id",all.x=TRUE)
data_nb_vendeurs <- data %>%
group_by(product_category_name_english,product_id) %>%
summarise("nb_vendeurs" = n_distinct(seller_id))
data_prix <- merge(data_prix,data_nb_vendeurs[,c("product_id","nb_vendeurs")],by="product_id",all.x=TRUE)
data_prix <- data_prix[,c("product_category_name_english","product_id","prix_moyen","delai_moyen_livraison","nb_vendeurs","categorie_vente")]
data_descr_produit <- data %>% distinct(product_category_name_english,product_id,product_name_lenght,product_description_lenght,product_photos_qty,product_weight_g,product_length_cm,product_height_cm,product_width_cm)
data_prix <- merge(data_prix,data_descr_produit[,c("product_id","product_name_lenght","product_description_lenght","product_photos_qty","product_weight_g","product_length_cm","product_height_cm","product_width_cm")],by="product_id",all.x=TRUE)
library(rpart)
liste_categ <- unique(data_prix["product_category_name_english"])
liste_arbres <- list()
for(categorie in liste_categ){
data_prix_categ <- data_prix[data_prix$product_category_name_english==categorie,]
# Suppression de la variable de catégorie
data_prix_categ <- subset(data_prix_categ, select = -c(product_category_name_english,product_id))
# Définir la taille de l'échantillon d'apprentissage pour chaque catégorie
smp_size <- floor(0.75 * nrow(data_prix_categ))
# Définir le vecteur de l'apprentissage pour chaque catégorie
set.seed(245)
train_ind <- sample(seq_len(nrow(data_prix_categ)), size = smp_size)
# Deux tables apprentissage et test pour chaque catégorie
data_prix_categ.train <- data_prix_categ[train_ind, ]
data_prix_categ.test <- data_prix_categ[-train_ind, ]
#Construction de l'arbre
arbre<-rpart(categorie_vente~ ., data= data_prix_categ.train,control=rpart.control(minsplit=1,cp=-1), method="class")
liste_arbres <- c(liste_arbres,arbre)
}
#### Importation des données
library(dplyr)
library(readr)
library(rpart)
#### Création de l'arbre pour la catégorie "bed_bath_table"
data_bed_bath_table <- data_prix[data_prix$product_category_name_english=="bed_bath_table",]
# Suppression de la variable de catégorie
data_bed_bath_table <- subset(data_bed_bath_table, select = -c(product_category_name_english,product_id))
# Définir la taille de l'échantillon d'apprentissage pour chaque catégorie pour garder une proportion équivalente de chaque catégorie
data_bed_bath_table_1 <- data_bed_bath_table[data_bed_bath_table$categorie_vente == 1,]
data_bed_bath_table_2 <- data_bed_bath_table[data_bed_bath_table$categorie_vente == 2,]
data_bed_bath_table_3 <- data_bed_bath_table[data_bed_bath_table$categorie_vente == 3,]
smp_size <- floor(nrow(data_bed_bath_table_3)*0.75)
# Définir le vecteur de l'apprentissage pour chaque catégorie
set.seed(245)
train_ind_1 <- sample(seq_len(nrow(data_bed_bath_table_1)), size = smp_size)
train_ind_2 <- sample(seq_len(nrow(data_bed_bath_table_2)), size = smp_size)
train_ind_3 <- sample(seq_len(nrow(data_bed_bath_table_3)), size = smp_size)
# Deux tables apprentissage et test pour chaque catégorie
data_bed_bath_table.train <- rbind(data_bed_bath_table_1[train_ind_1, ],data_bed_bath_table_2[train_ind_2, ],data_bed_bath_table_3[train_ind_3, ])
data_bed_bath_table.test <- rbind(data_bed_bath_table_1[-train_ind_1, ],data_bed_bath_table_2[-train_ind_2, ],data_bed_bath_table_3[-train_ind_3, ])
# Construction de l'arbre
arbre_bed_bath_table <-rpart(categorie_vente~ ., data= data_bed_bath_table.train,
control=rpart.control(minsplit=1,cp=-1), method="class")
library(readr)
customers <- read_csv("Données/olist_customers_dataset.csv")
geolocation <- read_csv("Données/olist_geolocation_dataset.csv")
sellers <- read_csv("Données/olist_sellers_dataset.csv")
order_items <- read_csv("Données/olist_order_items_dataset.csv")
products <- read_csv("Données/olist_products_dataset.csv")
orders <- read_csv("Données/olist_orders_dataset.csv")
order_payments <- read_csv("Données/olist_order_payments_dataset.csv")
order_reviews <- read_csv("Données/olist_order_reviews_dataset.csv")
translation_product_category <- read_csv("Données/product_category_name_translation.csv")
# Chargement des packages nécessaires
library(knitr)
library(ggplot2)
library(dplyr)
library(mvtnorm)
library(FactoMineR)
library(corrplot)
library(factoextra)
library(gridExtra)
library(car)
library(MASS)
library(pls)
library(glmnet)
install.packages("glmnet")
# Chargement des packages nécessaires
library(knitr)
library(ggplot2)
library(dplyr)
library(mvtnorm)
library(FactoMineR)
library(corrplot)
library(factoextra)
library(gridExtra)
library(car)
library(MASS)
library(pls)
library(glmnet)
# Chargement des packages nécessaires
library(knitr)
library(ggplot2)
library(dplyr)
library(mvtnorm)
library(FactoMineR)
library(corrplot)
library(factoextra)
library(gridExtra)
library(car)
library(MASS)
library(pls)
data = read.table("GV_RSQ_data_scoring_risque.txt", header = TRUE, sep = "|", dec = ".")
data
summary(data)
quali = c(-1,-4,-8,-9,-10,-11)
stat_uni = function(x)
{
return(c(length(na.omit(x)),
length(x[is.na(x)])))
}
res_stat_uni = apply(data[,-1], 2, "stat_uni")
row.names(res_stat_uni) = c("Nobs", "N_manq.")
#print(round(t(res_stat_uni),3))
quali = c(-1,-4,-8,-9,-10,-11)
stat_uni = function(x)
{
return(c(length(na.omit(x)),
length(x[is.na(x)]),
min(x, na.rm=TRUE),
max(x, na.rm=TRUE),
mean(x, na.rm=TRUE),
median(x, na.rm=TRUE),
#quantile(x, 0.25, na.rm=TRUE),
#quantile(x,0.75, na.rm=TRUE),
sd(x, na.rm=TRUE)))
}
res_stat_uni = apply(data[,quali], 2, "stat_uni")
row.names(res_stat_uni) = c("Nobs", "N_manq.", "Min", "Max", "Moyenne", "Mediane", "Ecart-type")
#print(round(t(res_stat_uni),3))
library(gridExtra, lib.loc = "/usr/lib/R/site-library")
library(ggplot2)
box1 = ggplot(data, aes(y=Montant)) +
geom_boxplot()
box2 = ggplot(data, aes(y=Duree)) +
geom_boxplot()
box3 = ggplot(data, aes(y=Taux_interet)) +
geom_boxplot()
box4 = ggplot(data, aes(y=Ressources_Client)) +
geom_boxplot()
box5 = ggplot(data, aes(y=Charges_Client)) +
geom_boxplot()
grid.arrange(box1,box2,box3,box4,box5, nrow=1,top = "Boxplots de nos 5 variables")
mat_cor = cor(data[-1], use = 'all.obs')
corrplot(mat_cor, method="circle")
data$Telephone =  as.factor(data$Telephone)
data$Assurance = as.factor(data$Assurance)
data$Client = as.factor(data$Client)
data$Payeur = as.factor(data$Payeur)
df_centre_reduit = data
df_centre_reduit[,6] = scale(data[,6],center=TRUE,scale=TRUE)
df_centre_reduit[,2] = scale(data[,2],center=TRUE,scale=TRUE)
df_centre_reduit[,7] = scale(data[,7],center=TRUE,scale=TRUE)
df_centre_reduit[,3] = scale(data[,3],center=TRUE,scale=TRUE)
df_centre_reduit[,5] = scale(data[,5],center=TRUE,scale=TRUE)
df_centre_reduit
reg <- glm(Payeur ~ ., data = df_centre_reduit[,-1], family = binomial(logit))
reg
modele1 = glm(Payeur ~ Montant + Duree + Taux_interet + Ressources_Client + Charges_Client , data = df_centre_reduit[,-1], family = binomial(logit))
vif(modele1)
modele2 = glm(Payeur ~. , data = data[,-1], family = binomial(logit))
vif(modele2)
library(MASS)
stepAIC(modele1)
stepAIC(modele2)
df_2 = data[-353,]
coef(glm(Payeur ~. , data = df_2[,-1], family = binomial(logit)))
df_2 = data[-353,]
coef(glm(Payeur ~. , data = df_2[,-1], family = binomial(logit)))
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(readr)
customers <- read_csv("Données/olist_customers_dataset.csv")
geolocation <- read_csv("Données/olist_geolocation_dataset.csv")
sellers <- read_csv("Données/olist_sellers_dataset.csv")
order_items <- read_csv("Données/olist_order_items_dataset.csv")
products <- read_csv("Données/olist_products_dataset.csv")
orders <- read_csv("Données/olist_orders_dataset.csv")
order_payments <- read_csv("Données/olist_order_payments_dataset.csv")
order_reviews <- read_csv("Données/olist_order_reviews_dataset.csv")
translation_product_category <- read_csv("Données/product_category_name_translation.csv")
library(dplyr)
geolocationbis <- geolocation %>%
arrange(geolocation_zip_code_prefix) %>%
group_by(geolocation_zip_code_prefix) %>%
summarise_all(last)
library("data.table")
merge1 <- merge(customers,geolocationbis,by.x="customer_zip_code_prefix",by.y="geolocation_zip_code_prefix",all.x=TRUE)
merge2 <- merge(merge1,orders,by="customer_id",all.x=TRUE)
merge3 <- merge(merge2,order_items,by="order_id",all.x=TRUE)
merge4 <- merge(merge3,products,by="product_id",all.x=TRUE)
merge5 <- merge(merge4,sellers,by="seller_id",all.x=TRUE)
data <- merge(merge5,translation_product_category,by="product_category_name",all.x=TRUE)
library(tidyr)
data <- data %>% drop_na(product_category_name_english)
head(data)
summary(data)
data_prix <- data %>%
arrange(product_category_name_english,product_id) %>%
group_by(product_category_name_english,product_id) %>%
summarise(nb_ventes=n())
data_prixmoyen <- data %>%
group_by(product_category_name_english,product_id) %>%
summarise(prix_moyen=mean(price))
data_prix <- merge(data_prix,data_prixmoyen[,c("product_id","prix_moyen")],by="product_id",all.x=TRUE)
for(categorie in unique(data_prix["product_category_name_english"])){
categ <- data_prix[data_prix$product_category_name_english==categorie,]
data_prix["categorie_prix"] <- ntile(data_prix$prix_moyen,n=5)
}
data_nb_vente_categ <- data %>%
arrange(product_category_name_english) %>%
group_by(product_category_name_english) %>%
summarise(nb_vente_categ=n())
categ_a_garder <- data_nb_vente_categ %>% filter(nb_vente_categ>nrow(data)*0.01)
data_prix <- merge(data_prix,categ_a_garder,by="product_category_name_english")
data_nb_vente_categ_prix <- data_prix %>%
arrange(product_category_name_english,categorie_prix) %>%
group_by(product_category_name_english,categorie_prix) %>%
summarise(nb_vente_categ_prix=n())
data_nb_vente_produit <- data_prix %>%
arrange(product_category_name_english,categorie_prix,product_id) %>%
group_by(product_category_name_english,categorie_prix,product_id) %>%
summarise(nb_vente_produit=n())
data_proportion_vente <- merge(data_nb_vente_produit,data_nb_vente_categ_prix,by=c("product_category_name_english","categorie_prix"),all.x=TRUE)
data_proportion_vente["proportion_vente"] = data_proportion_vente$nb_vente_produit/data_proportion_vente$nb_vente_categ_prix
for(categorie_produit in unique(data_proportion_vente["product_category_name_english"])){
for(categ_prix in unique(data_proportion_vente["categorie_prix"])){
categ <- data_proportion_vente %>% filter(product_category_name_english==categorie_produit & categorie_prix==categ_prix)
data_prix["categorie_vente"] <- ntile(data_proportion_vente$proportion_vente,n=3)
}
}
data["delai_de_livraison"] <- as.numeric(difftime(data$order_estimated_delivery_date,data$order_purchase_timestamp),units="days")
data_delaimoyen <- data %>%
group_by(product_category_name_english,product_id) %>%
summarise(delai_moyen_livraison=mean(delai_de_livraison))
data_prix <- merge(data_prix,data_delaimoyen[,c("product_id","delai_moyen_livraison")],by="product_id",all.x=TRUE)
data_nb_vendeurs <- data %>%
group_by(product_category_name_english,product_id) %>%
summarise("nb_vendeurs" = n_distinct(seller_id))
data_prix <- merge(data_prix,data_nb_vendeurs[,c("product_id","nb_vendeurs")],by="product_id",all.x=TRUE)
data_prix <- data_prix[,c("product_category_name_english","product_id","prix_moyen","delai_moyen_livraison","nb_vendeurs","categorie_vente")]
data_descr_produit <- data %>% distinct(product_category_name_english,product_id,product_name_lenght,product_description_lenght,product_photos_qty,product_weight_g,product_length_cm,product_height_cm,product_width_cm)
data_prix <- merge(data_prix,data_descr_produit[,c("product_id","product_name_lenght","product_description_lenght","product_photos_qty","product_weight_g","product_length_cm","product_height_cm","product_width_cm")],by="product_id",all.x=TRUE)
library(rpart)
liste_categ <- unique(data_prix["product_category_name_english"])
liste_arbres <- list()
for(categorie in liste_categ){
data_prix_categ <- data_prix[data_prix$product_category_name_english==categorie,]
# Suppression de la variable de catégorie
data_prix_categ <- subset(data_prix_categ, select = -c(product_category_name_english,product_id))
# Définir la taille de l'échantillon d'apprentissage pour chaque catégorie
smp_size <- floor(0.75 * nrow(data_prix_categ))
# Définir le vecteur de l'apprentissage pour chaque catégorie
set.seed(245)
train_ind <- sample(seq_len(nrow(data_prix_categ)), size = smp_size)
# Deux tables apprentissage et test pour chaque catégorie
data_prix_categ.train <- data_prix_categ[train_ind, ]
data_prix_categ.test <- data_prix_categ[-train_ind, ]
#Construction de l'arbre
arbre<-rpart(categorie_vente~ ., data= data_prix_categ.train,control=rpart.control(minsplit=1,cp=-1), method="class")
liste_arbres <- c(liste_arbres,arbre)
}
#### Importation des données
library(dplyr)
library(readr)
library(rpart)
#### Création de l'arbre pour la catégorie "bed_bath_table"
data_bed_bath_table <- data_prix[data_prix$product_category_name_english=="bed_bath_table",]
# Suppression de la variable de catégorie
data_bed_bath_table <- subset(data_bed_bath_table, select = -c(product_category_name_english,product_id))
# Définir la taille de l'échantillon d'apprentissage pour chaque catégorie pour garder une proportion équivalente de chaque catégorie
data_bed_bath_table_1 <- data_bed_bath_table[data_bed_bath_table$categorie_vente == 1,]
data_bed_bath_table_2 <- data_bed_bath_table[data_bed_bath_table$categorie_vente == 2,]
data_bed_bath_table_3 <- data_bed_bath_table[data_bed_bath_table$categorie_vente == 3,]
smp_size <- floor(nrow(data_bed_bath_table_3)*0.75)
# Définir le vecteur de l'apprentissage pour chaque catégorie
set.seed(245)
train_ind_1 <- sample(seq_len(nrow(data_bed_bath_table_1)), size = smp_size)
train_ind_2 <- sample(seq_len(nrow(data_bed_bath_table_2)), size = smp_size)
train_ind_3 <- sample(seq_len(nrow(data_bed_bath_table_3)), size = smp_size)
# Deux tables apprentissage et test pour chaque catégorie
data_bed_bath_table.train <- rbind(data_bed_bath_table_1[train_ind_1, ],data_bed_bath_table_2[train_ind_2, ],data_bed_bath_table_3[train_ind_3, ])
data_bed_bath_table.test <- rbind(data_bed_bath_table_1[-train_ind_1, ],data_bed_bath_table_2[-train_ind_2, ],data_bed_bath_table_3[-train_ind_3, ])
# Construction de l'arbre
arbre_bed_bath_table <-rpart(categorie_vente~ ., data= data_bed_bath_table.train,
control=rpart.control(minsplit=1,cp=-1), method="class")
#### Importation des données
library(dplyr)
library(readr)
library(rpart)
#### Création de l'arbre pour la catégorie "bed_bath_table"
data_bed_bath_table <- data_prix[data_prix$product_category_name_english=="bed_bath_table",]
# Suppression de la variable de catégorie
data_bed_bath_table <- subset(data_bed_bath_table, select = -c(product_category_name_english,product_id))
# Définir la taille de l'échantillon d'apprentissage pour chaque catégorie pour garder une proportion équivalente de chaque catégorie
data_bed_bath_table_1 <- data_bed_bath_table[data_bed_bath_table$categorie_vente == 1,]
data_bed_bath_table_2 <- data_bed_bath_table[data_bed_bath_table$categorie_vente == 2,]
data_bed_bath_table_3 <- data_bed_bath_table[data_bed_bath_table$categorie_vente == 3,]
smp_size <- floor(nrow(data_bed_bath_table_3)*0.75)
# Définir le vecteur de l'apprentissage pour chaque catégorie
set.seed(245)
train_ind_1 <- sample(seq_len(nrow(data_bed_bath_table_1)), size = smp_size)
train_ind_2 <- sample(seq_len(nrow(data_bed_bath_table_2)), size = smp_size)
train_ind_3 <- sample(seq_len(nrow(data_bed_bath_table_3)), size = smp_size)
# Deux tables apprentissage et test pour chaque catégorie
data_bed_bath_table.train <- rbind(data_bed_bath_table_1[train_ind_1, ],data_bed_bath_table_2[train_ind_2, ],data_bed_bath_table_3[train_ind_3, ])
data_bed_bath_table.test <- rbind(data_bed_bath_table_1[-train_ind_1, ],data_bed_bath_table_2[-train_ind_2, ],data_bed_bath_table_3[-train_ind_3, ])
# Construction de l'arbre
arbre_bed_bath_table <-rpart(categorie_vente~ ., data= data_bed_bath_table.train,
control=rpart.control(minsplit=1,cp=-1), method="class")
setwd("/Users/lucasdelahaye/Desktop/DataMining")
setwd("/Users/lucasdelahaye/Desktop/DataMining/projet-data-mining")
shiny::runApp()
library(shiny); runApp('~/Bureau/DataMining/DataMining/Projet.R')
library(lubridate)
data <- data %>%
mutate(month = floor_date(order_delivered_customer_date, "month"))
price_delai_cat <- data_prix %>%
group_by(product_category_name_english) %>%
summarize(price = mean(prix_moyen, na.rm = TRUE),
delai = mean(delai_moyen_livraison, na.rm = TRUE))
monthly_data <- data %>%
group_by(month) %>%
summarize(monthly_price_sum = sum(price, na.rm = TRUE))
runApp('~/Bureau/DataMining/DataMining/Projet.R')
price_delai_cat
runApp('~/Bureau/DataMining/DataMining/Projet.R')
runApp('~/Bureau/DataMining/DataMining/Projet.R')
library(shiny); runApp('Projet.R')
library(lubridate)
data <- data %>%
mutate(month = floor_date(order_delivered_customer_date, "month"))
price_delai_cat <- data_prix %>%
group_by(product_category_name_english) %>%
summarize(price = mean(prix_moyen, na.rm = TRUE),
delai = mean(delai_moyen_livraison, na.rm = TRUE))
monthly_data <- data %>%
group_by(month) %>%
summarize(monthly_price_sum = sum(price, na.rm = TRUE))
runApp('Projet.R')
mat_conf_train_bed_bath_table
mat_conf_test_bed_bath_table
